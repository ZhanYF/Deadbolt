Kernel config:

From Debian config remove:

CONFIG_X86_X32

Change:
CONFIG_SYSTEM_TRUSTED_KEYS="certs/signing_key.pem"

Then add the following:

# enable base security options
CONFIG_SECURITY=y
CONFIG_SECURITYFS=y
# enable yama to control ptrace
CONFIG_SECURITY_YAMA=y
# base integrity features
CONFIG_INTEGRITY=y
# enable public key signatures
CONFIG_INTEGRITY_SIGNATURE=y
CONFIG_INTEGRITY_ASYMMETRIC_KEYS=y
CONFIG_INTEGRITY_TRUSTED_KEYRING=y
# enable auditing and kernel option 
CONFIG_INTEGRITY_AUDIT=y
# enable IMA
CONFIG_IMA=y
CONFIG_IMA_MEASURE_PCR_IDX=10
CONFIG_IMA_NG_TEMPLATE=y
CONFIG_IMA_DEFAULT_TEMPLATE="ima-ng"
CONFIG_IMA_DEFAULT_HASH_SHA1=y
CONFIG_IMA_APPRAISE=y
CONFIG_IMA_APPRAISE_BOOTPARAM=y
CONFIG_IMA_APPRAISE_MODSIG=y
# CONFIG_IMA_TRUSTED_KEYRING makes keyring name .ima
CONFIG_IMA_TRUSTED_KEYRING=y
CONFIG_IMA_MEASURE_ASYMMETRIC_KEYS=y
CONFIG_IMA_QUEUE_EARLY_BOOT_KEYS=y
# load IMA key at boot (needed to get RSA signed IMA)
CONFIG_IMA_TRUSTED_KEYRING
CONFIG_IMA_LOAD_X509=y
CONFIG_IMA_X509_PATH="/etc/keys/x509_ima.der"
# allows chains of signatures
CONFIG_IMA_KEYRINGS_PERMIT_SIGNED_BY_BUILTIN_OR_SECONDARY=y
# for signing init program
CONFIG_IMA_APPRAISE_SIGNED_INIT=y
# evm is for uid, gid, perms, SE Linux, and other MAC labels.
# the kernel loads this path by itself at boot time
CONFIG_EVM=y
CONFIG_EVM_ATTR_FSUUID=y
# this allows loading extra xattrs into /sys/kernel/security/integrity/evm/evm_xattrs
CONFIG_EVM_ADD_XATTRS=y
CONFIG_EVM_LOAD_X509=y
CONFIG_EVM_X509_PATH="/etc/keys/x509_evm.der"

# lockdown goes well with IMA
CONFIG_SECURITY_LOCKDOWN_LSM

# this must be disabled to avoid default rules, otherwise can't remove them
CONFIG_IMA_APPRAISE_BUILD_POLICY=n

# for development allow this
CONFIG_IMA_WRITE_POLICY=y
CONFIG_IMA_READ_POLICY=y
# dont need this debugging one
CONFIG_IMA_DISABLE_HTABLE=n

# dont think we need this
CONFIG_IMA_ARCH_POLICY=n

# module signing is always a good thing, and specifying a signing key is needed
# to preload that signing key
CONFIG_MODULE_SIG=y
CONFIG_MODULE_SIG_FORCE=y
CONFIG_MODULE_SIG_ALL=y
CONFIG_MODULE_SIG_SHA256=y
CONFIG_MODULE_SIG_HASH="sha256"
CONFIG_MODULE_SIG_KEY="certs/signing_key.pem"

KERNEL KEYS

keys are in certs/signing_key.* in the kernel build (or samples/signing_key.*
in git)  and can be copied to the new kernel.  Note that we MUST compile all
kernels with the same certs so we can swap them between system images.

The following error is from not having CONFIG_MODULE_SIG_ALL enabled:
[    1.166461] virtio_ring: module verification failed: signature and/or required key missing - tainting kernel
